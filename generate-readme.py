import yaml
import sys
from reeco import Schema

output_readme = 'schema/README.md'

# def terms(s):
#     return sorted(s['terms'], key=lambda d: d['_position'])

TXT = """# Annotation schema

**Do not edit: this file is automatically generated**

## Introduction
"""

def makeLink(o):
    if 'type' in o:
        return "[%s](#%s)" % (o['type'],o['type'])
    if 'term' in o:
        return "[%s](#%s)" % (o['term'],o['term'])
    else:
        return "[%s](#%s)" % (o,o)

SCHEMA = Schema()

TXT = TXT + """

## Containers and Components
"""

TXT = TXT + """

### List of types

Container types:
"""
# List of container types
for component in SCHEMA.containers():
    TXT = TXT + "\n - " + makeLink(component)
    for sub1 in SCHEMA.subtypes(component['type']):
        TXT = TXT + "\n   - " + makeLink(sub1)

TXT = TXT + """

Component types:
"""
# List of component types
for component in SCHEMA.components():
    TXT = TXT + "\n - " + makeLink(component)
    for sub1 in SCHEMA.subtypes(component['type']):
        TXT = TXT + "\n   - " + makeLink(sub1)
        for sub2 in SCHEMA.subtypes(sub1['type']):
            TXT = TXT + "\n    - " + makeLink(sub2)
            for sub3 in SCHEMA.subtypes(sub2['type']):
                TXT = TXT + "\n     - " + makeLink(sub3)
                for sub4 in SCHEMA.subtypes(sub3['type']):
                    TXT = TXT + "\n      - " + makeLink(sub4)
 
# List of terms to annotate containers
TXT = TXT + """

### Terms for Containers
"""
for term in SCHEMA.termsFor('Container'):
    TXT = TXT + "\n - " + makeLink(term)
    for sub1 in SCHEMA.subterms(term['term']):
        TXT = TXT + "\n   - " + makeLink(sub1)
        for sub2 in SCHEMA.subterms(sub1['term']):
            TXT = TXT + "\n    - " + makeLink(sub2)
    


TXT = TXT + """

### Terms for Components

"""
for term in SCHEMA.termsFor('Component'):
    TXT = TXT + "\n - " + makeLink(term)
    for sub1 in SCHEMA.subterms(term['term']):
        TXT = TXT + "\n   - " + makeLink(sub1)
        for sub2 in SCHEMA.subterms(sub1['term']):
            TXT = TXT + "\n      - " + makeLink(sub2)
            for sub3 in SCHEMA.subterms(sub2['term']):
                TXT = TXT + "\n        - " + makeLink(sub3)
                for sub4 in SCHEMA.subterms(sub4['term']):
                    TXT = TXT + "\n          - " + makeLink(sub4)

TXT = TXT + """

## Types

"""

for typee in SCHEMA.types():
    TXT = TXT + "\n### " + typee['type'] + "\n"
    ks = ['type', 'label', 'supertype-id']
    for k in ks:
        if k in typee:
            TXT = TXT + "\n\n**" + k + "**: " + str(typee[k]) 
    if 'description' in typee:
        TXT = TXT + "\n\n" + str(typee[ 'description'])
    # if 'example-values' in term and term['example-values'].strip() != '':
    #    TXT = TXT + "\n\nExample:\n\n```\n" + str(term[ 'example-values']) + "\n```\n\n"

TXT = TXT + """

## Terms

"""

for term in SCHEMA.terms():
    TXT = TXT + "\n### " + term['term'] + "\n"
    ks = ['term', 'label', 'scope', 'super-term', 'mandatory']
    for k in ks:
        if k in term:
            TXT = TXT + "\n\n**" + k + "**: " + str(term[k]) 
    # TXT = TXT + "\n\n**domain**: " 
    # for d in term['domain']:
    #     TXT = TXT + "\n\n - " + makeLink(d) 
    if 'description' in term:
        TXT = TXT + "\n\n" + str(term[ 'description'])
    if 'example-values' in term and term['example-values'].strip() != '':
        TXT = TXT + "\n\nExample:\n\n```\n" + str(term[ 'example-values']) + "\n```\n\n"

with open(output_readme, "w") as text_file:
    text_file.write(TXT)